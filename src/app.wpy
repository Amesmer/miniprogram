<style lang="less">
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import '@/baseAPI.js'

export default class extends wepy.app {
  config = {
    pages: [
      'pages/tabs/home',
      'pages/tabs/me',
      'pages/tabs/cates',
      'pages/tabs/search',
      'pages/tabs/cart',
      'pages/goods_detail/main',
      'pages/goods_list',
      'pages/index',
      'pages/order'
    ],
    window: {
      backgroundTextStyle: 'dark',
      navigationBarBackgroundColor: '#d81e06',
      navigationBarTitleText: 'ugo',
      navigationBarTextStyle: 'white'
    },
    tabBar: {
      list: [
        {
          pagePath: 'pages/tabs/home',
          text: '首页',
          iconPath: '/assets/icons/home.png',
          selectedIconPath: '/assets/icons/home-active.png'
        },
        {
          pagePath: 'pages/tabs/cates',
          text: '分类',
          iconPath: '/assets/icons/cates.png',
          selectedIconPath: '/assets/icons/cates-active.png'
        },
        {
          pagePath: 'pages/tabs/search',
          text: '搜索',
          iconPath: '/assets/icons/search.png',
          selectedIconPath: '/assets/icons/search-active.png'
        },
        {
          pagePath: 'pages/tabs/cart',
          text: '购物车',
          iconPath: '/assets/icons/cart.png',
          selectedIconPath: '/assets/icons/cart-active.png'
        },

        {
          pagePath: 'pages/tabs/me',
          text: '个人中心',
          iconPath: '/assets/icons/my.png',
          selectedIconPath: '/assets/icons/my-active.png'
        }
      ]
    },
    // 引用并注册全局组件
    usingComponents: {
      'van-badge': './assets/vant/badge/index',
      'van-badge-group': './assets/vant/badge-group/index',
      'van-row': './assets/vant/row/index',
      'van-col': './assets/vant/col/index',
      'van-search': './assets/vant/search/index',
      'van-cell': './assets/vant/cell/index',
      'van-cell-group': './assets/vant/cell-group/index',
      'van-icon': './assets/vant/icon/index',
      'van-tag': './assets/vant/tag/index',
      'van-card': './assets/vant/card/index',
      'van-tab': './assets/vant/tab/index',
      'van-tabs': './assets/vant/tabs/index',
      'van-goods-action': './assets/vant/goods-action/index',
      'van-goods-action-icon': './assets/vant/goods-action-icon/index',
      'van-goods-action-button': './assets/vant/goods-action-button/index',
      'van-stepper': './assets/vant/stepper/index',
      'van-checkbox': './assets/vant/checkbox/index',
      'van-swipe-cell': './assets/vant/swipe-cell/index',
      'van-submit-bar': './assets/vant/submit-bar/index',
      'van-button': './assets/vant/button/index',
      wxparse: './assets/wxparse/wxparse'
    }
  }

  // 专门储存全局共享数据
  // 只需要通过this.$parent.globalData就可以拿到这个对象
  globalData = {
    // 全局的购物车列表
    cart: [],
    total: 0
  }

  // 添加商品到购物车列表
  addGoodsToCart(goods) {
    // 判断是否已经在购物车中
    const i = this.globalData.cart.findIndex(x => x.id === goods.goods_id)
    if (i !== -1) {
      this.globalData.cart[i].count++
      this.saveCartToStorage()
      return
    }
    // console.log(goods);
    // id 名称 图片 价格 数量  是否默认被选中
    const info = {
      id: goods.goods_id,
      name: goods.goods_name,
      pic: goods.goods_small_logo,
      price: goods.goods_price,
      count: 1,
      isCheck: true
    }
    // 整理出来的商品信息对象存储到购物车列表
    this.globalData.cart.push(info)
    this.saveCartToStorage()
  }

  // 更新商品数量
  updateGoodsCount(id, count) {
    const i = this.globalData.cart.findIndex(x => x.id === id)
    if (i !== -1) {
      this.globalData.cart[i].count = count
      // 保存到本地数据
      this.saveCartToStorage()
    }
  }
  // 更新购物车中每件商品的选中状态
  updateAllGoodsStatus(status) {
    this.globalData.cart.forEach(x => {
      x.isCheck = status
    })
    this.saveCartToStorage()
  }
  // 移除商品
  removeGoodsById(id) {
    const i = this.globalData.cart.findIndex(x => x.id === id)
    if (i !== -1) {
      this.globalData.cart.splice(i, 1)
      this.saveCartToStorage()
    }
  }
  // 更新商品的选中状态
  updateGoodsStatus(id, status) {
    const i = this.globalData.cart.findIndex(x => x.id === id)
    if (i !== -1) {
      this.globalData.cart[i].isCheck = status
      this.saveCartToStorage()
    }
  }
  // 将购物车中的上皮年数据持久化保存到本地
  saveCartToStorage() {
    wepy.setStorageSync('cart', this.globalData.cart)
    this.renderCartBadge()
  }

  // 渲染购物车的徽章
  async renderCartBadge() {
    let c = 0
    this.globalData.cart.forEach(x => {
      if (x.isCheck) {
        c += x.count
      }
    })

    // 更新全局的商品数量
    this.globalData.total = c

    const res = await wepy
      .setTabBarBadge({
        index: 3,
        text: c + ''
      })
      .catch(err => err)

    // 设置 tabBar 的徽章失败！
    if (res.errMsg !== 'setTabBarBadge:ok') {
    }
  }
  constructor() {
    super()
    this.use('requestfix')

    // 开启promise功能
    this.use('promisify')

    // 拦截器
    this.intercept('request', {
      // 发出请求时的回调函数
      config(p) {
        wepy.showLoading({
          title: '数据加载中...'
        })
        return p
      },

      // 请求成功后的回调函数
      success(p) {
        // 必须返回响应数据对象，否则后续无法对响应数据进行处理
        return p
      },

      // 请求失败后的回调函数
      fail(p) {
        // 必须返回响应数据对象，否则后续无法对响应数据进行处理
        return p
      },

      // 请求完成时的回调函数(请求成功或失败都会被执行)
      complete(p) {
        // 隐藏loading 效果
        wepy.hideLoading()
      }
    })
  }

  onLaunch() {
    // 小程序启动时读取本地数据
    this.globalData.cart = wepy.getStorageSync('cart') || []
    // 添加tab角标
    this.renderCartBadge()
  }
}
</script>
